// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CalculateStatisticsHandlerFunc turns a function with the right signature into a calculate statistics handler
type CalculateStatisticsHandlerFunc func(CalculateStatisticsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CalculateStatisticsHandlerFunc) Handle(params CalculateStatisticsParams) middleware.Responder {
	return fn(params)
}

// CalculateStatisticsHandler interface for that can handle valid calculate statistics params
type CalculateStatisticsHandler interface {
	Handle(CalculateStatisticsParams) middleware.Responder
}

// NewCalculateStatistics creates a new http.Handler for the calculate statistics operation
func NewCalculateStatistics(ctx *middleware.Context, handler CalculateStatisticsHandler) *CalculateStatistics {
	return &CalculateStatistics{Context: ctx, Handler: handler}
}

/*
CalculateStatistics swagger:route POST /calculate-statistics/{pollId} calculateStatistics

Calculate statistics for a Poll
*/
type CalculateStatistics struct {
	Context *middleware.Context
	Handler CalculateStatisticsHandler
}

func (o *CalculateStatistics) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCalculateStatisticsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
