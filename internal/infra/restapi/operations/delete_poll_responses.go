// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/babadro/forecaster/internal/models/swagger"
)

// DeletePollNoContentCode is the HTTP code returned for type DeletePollNoContent
const DeletePollNoContentCode int = 204

/*DeletePollNoContent Poll deleted successfully

swagger:response deletePollNoContent
*/
type DeletePollNoContent struct {
}

// NewDeletePollNoContent creates DeletePollNoContent with default headers values
func NewDeletePollNoContent() *DeletePollNoContent {

	return &DeletePollNoContent{}
}

// WriteResponse to the client
func (o *DeletePollNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeletePollNotFoundCode is the HTTP code returned for type DeletePollNotFound
const DeletePollNotFoundCode int = 404

/*DeletePollNotFound Poll not found

swagger:response deletePollNotFound
*/
type DeletePollNotFound struct {
}

// NewDeletePollNotFound creates DeletePollNotFound with default headers values
func NewDeletePollNotFound() *DeletePollNotFound {

	return &DeletePollNotFound{}
}

// WriteResponse to the client
func (o *DeletePollNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// DeletePollInternalServerErrorCode is the HTTP code returned for type DeletePollInternalServerError
const DeletePollInternalServerErrorCode int = 500

/*DeletePollInternalServerError Internal server error

swagger:response deletePollInternalServerError
*/
type DeletePollInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewDeletePollInternalServerError creates DeletePollInternalServerError with default headers values
func NewDeletePollInternalServerError() *DeletePollInternalServerError {

	return &DeletePollInternalServerError{}
}

// WithPayload adds the payload to the delete poll internal server error response
func (o *DeletePollInternalServerError) WithPayload(payload *swagger.Error) *DeletePollInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete poll internal server error response
func (o *DeletePollInternalServerError) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePollInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeletePollDefault error

swagger:response deletePollDefault
*/
type DeletePollDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *swagger.Error `json:"body,omitempty"`
}

// NewDeletePollDefault creates DeletePollDefault with default headers values
func NewDeletePollDefault(code int) *DeletePollDefault {
	if code <= 0 {
		code = 500
	}

	return &DeletePollDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete poll default response
func (o *DeletePollDefault) WithStatusCode(code int) *DeletePollDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete poll default response
func (o *DeletePollDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete poll default response
func (o *DeletePollDefault) WithPayload(payload *swagger.Error) *DeletePollDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete poll default response
func (o *DeletePollDefault) SetPayload(payload *swagger.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeletePollDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
