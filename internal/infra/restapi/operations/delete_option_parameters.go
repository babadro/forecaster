// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteOptionParams creates a new DeleteOptionParams object
// no default values defined in spec.
func NewDeleteOptionParams() DeleteOptionParams {

	return DeleteOptionParams{}
}

// DeleteOptionParams contains all the bound params for the delete option operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteOption
type DeleteOptionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	OptionID int16
	/*
	  Required: true
	  In: path
	*/
	PollID int32
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteOptionParams() beforehand.
func (o *DeleteOptionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rOptionID, rhkOptionID, _ := route.Params.GetOK("optionId")
	if err := o.bindOptionID(rOptionID, rhkOptionID, route.Formats); err != nil {
		res = append(res, err)
	}

	rPollID, rhkPollID, _ := route.Params.GetOK("pollId")
	if err := o.bindPollID(rPollID, rhkPollID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindOptionID binds and validates parameter OptionID from path.
func (o *DeleteOptionParams) bindOptionID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt16(raw)
	if err != nil {
		return errors.InvalidType("optionId", "path", "int16", raw)
	}
	o.OptionID = value

	return nil
}

// bindPollID binds and validates parameter PollID from path.
func (o *DeleteOptionParams) bindPollID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("pollId", "path", "int32", raw)
	}
	o.PollID = value

	return nil
}
