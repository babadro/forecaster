// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateOptionHandlerFunc turns a function with the right signature into a create option handler
type CreateOptionHandlerFunc func(CreateOptionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateOptionHandlerFunc) Handle(params CreateOptionParams) middleware.Responder {
	return fn(params)
}

// CreateOptionHandler interface for that can handle valid create option params
type CreateOptionHandler interface {
	Handle(CreateOptionParams) middleware.Responder
}

// NewCreateOption creates a new http.Handler for the create option operation
func NewCreateOption(ctx *middleware.Context, handler CreateOptionHandler) *CreateOption {
	return &CreateOption{Context: ctx, Handler: handler}
}

/*CreateOption swagger:route POST /options createOption

Create a new Option

*/
type CreateOption struct {
	Context *middleware.Context
	Handler CreateOptionHandler
}

func (o *CreateOption) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateOptionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
