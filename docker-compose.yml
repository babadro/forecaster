version: "3.5"

services:
  postgres:
    image: postgres:15.3-alpine3.17
    restart: unless-stopped
    ports:
      - '5432:5432'
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 1s
      timeout: 5s
      retries: 3
      start_period: 0s
    environment:
        POSTGRES_DB: forecaster
        POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - db-data-forecast:/var/lib/postgresql/data
      - ./migrations/docker/init-local-docker.sql:/docker-entrypoint-initdb.d/0.init.sql

  migrate:
    build:
      context: .
      dockerfile: Dockerfile-migrate
    volumes:
      - ./migrations:/migrations
    depends_on:
        postgres:
            condition: service_healthy
    command: [ "migrate", "-source", "file:///migrations", "-database", "postgres://postgres@postgres:5432/forecaster?sslmode=disable", "up" ]

  ngrok:
   image: ngrok/ngrok:alpine
   env_file: .env.ngrok
   ports:
     - "4040:4040"
   command: [ "http", "service:8080" ]
   healthcheck:
     test: ["CMD", "nc", "-z", "-v", "localhost", "4040"]
     interval: 1s
     timeout: 5s
     retries: 10
     start_period: 0s

  service:
    build:
        context: .
        dockerfile: Dockerfile.dev
    #restart: unless-stopped
    depends_on:
        postgres:
          condition: service_healthy
        ngrok:
          condition: service_healthy
        migrate:
          condition: service_completed_successfully
    ports:
      - "8080:3000"
    env_file:
      - .env
      - .env.secrets
    environment:
      - START_TELEGRAM_BOT=${START_TELEGRAM_BOT}
    volumes:
      - ./:/app
volumes:
  db-data-forecast:
    driver: local